openapi: 3.0.2
servers:
  - description: API
    url: http://89.108.102.170/api
info:
  title: pockets
  version: 0.1.0

tags:
  - name: auth
    description: "Auth namespace"
  - name: users
    description: "Users namespace"
  - name: pockets
    description: "Pockets namespace"
  - name: targets
    description: "Targets namespace"
  - name: transactions
  - name: categories
  - name: targets

paths:
  '/auth/register/':
    post:
      tags:
        - auth
      summary: "Registration"
      requestBody:
        $ref: '#/components/requestBodies/RegistrationRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Registration201'
        '400':
          $ref: '#/components/responses/Registration400'

  '/auth/api-token-auth':
    post:
      tags:
        - auth
      summary: "Obtain tokens pair"
      requestBody:
        $ref: '#/components/requestBodies/TokenObtainRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenObtain200'
        '401':
          $ref: '#/components/responses/TokenObtain401'

  '/auth/api-token-refresh':
    post:
      tags:
        - auth
      summary: "Refresh tokens pair"
      requestBody:
        $ref: '#/components/requestBodies/TokenRefreshRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenObtain200'
        '401':
          $ref: '#/components/responses/TokenRefresh401'

  '/users/me':
    get:
      tags:
        - users
      summary: "User info"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UsersMe200'
        '400':
          description: "Unauthorized"

  '/pockets/transactions/':
    get:
      tags:
        - pockets
        - transactions
      summary: "Transactions list"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: number
          required: false
        - in: query
          name: offset
          schema:
            type: number
          required: false
        - $ref: '#/components/parameters/YearParam'
        - $ref: '#/components/parameters/MonthParam'
        - $ref: '#/components/parameters/OrderPocketsParam'

      responses:
        '200':
          $ref: '#/components/responses/TransactionsList200'
        '401':
          description: "Unauthorized"

    post:
      tags:
        - pockets
        - transactions
      summary: "Transaction Create"
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: "Unauthorized"

  '/pockets/transactions/{transaction_id}/':
    get:
      tags:
        - pockets
        - transactions
      summary: "Transaction retrieve"
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    put:
      tags:
        - pockets
        - transactions
      summary: "Transaction update"
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    patch:
      tags:
        - pockets
        - transactions
      summary: "Transaction partial update"
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransactionCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '400':
          $ref: '#/components/responses/TransactionCreate400'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    delete:
      tags:
        - pockets
        - transactions
      summary: "Transaction delete"
      parameters:
        - name: transaction_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: "No Content"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"

  '/pockets/transactions/global/':
    get:
      tags:
        - pockets
        - transactions
      summary: "Transactions global"
      security:
        - bearerAuth: []

      responses:
        '200':
          $ref: '#/components/responses/TransactionGlobal200'
        '401':
          description: "Unauthorized"


  '/pockets/transactions/balance/':
    get:
      tags:
        - pockets
        - transactions
      summary: "Pocket balance"
      security:
        - bearerAuth: []

      responses:
        '200':
          $ref: '#/components/responses/TransactionBalance200'
        '401':
          description: "Unauthorized"



  '/pockets/categories/':
    get:
      tags:
        - pockets
        - categories
      summary: "Categories list"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/YearParam'
        - $ref: '#/components/parameters/MonthParam'
        - $ref: '#/components/parameters/OrderPocketsParam'
      responses:
        '200':
          $ref: '#/components/responses/CategoriesList200'
        '401':
          description: "Unauthorized"
    post:
      tags:
        - pockets
        - categories
      summary: "Categoriy create"
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CategoryCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CategoriesList200'
        '400':
          $ref: '#/components/responses/CategoryCreate400'
        '401':
          description: "Unauthorized"

  '/pockets/categories/{category_id}/':
    get:
      tags:
        - pockets
        - categories
      summary: "Category retrieve"
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Categories200'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"

  '/pockets/categories/transactions-by-categories/':
    get:
      tags:
        - pockets
        - categories
      summary: "Transaction sums by categories"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/YearParam'
        - $ref: '#/components/parameters/MonthParam'
        - $ref: '#/components/parameters/OrderPocketsParam'

      responses:
        '200':
          $ref: '#/components/responses/CategoriesWithExpensesList200'
        '401':
          description: "Unauthorized"

  '/pockets/categories/top-categories-by-transactions/':
    get:
      tags:
        - pockets
        - categories
      summary: "Top 3 categories by sum transactions"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/YearParam'
        - $ref: '#/components/parameters/MonthParam'
        - $ref: '#/components/parameters/OrderPocketsParam'
      responses:
        '200':
          $ref: '#/components/responses/CategoriesTopList200'
        '401':
          description: "Unauthorized"

  '/targets/targets/':
    get:
      tags:
        - targets
      summary: "Targets list"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OrderTargetsParam'
      responses:
        '200':
          $ref: '#/components/responses/TargetsList200'
        '401':
          description: "Unauthorized"

    post:
      tags:
        - targets
      summary: "Target create"
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TargetCreateRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/TargetCreate201'
        '401':
          description: "Unauthorized"

  '/targets/targets/{target_id}/':
    get:
      tags:
        - targets
      summary: "Target retrieve"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: target_id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Target200'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    put:
      tags:
        - targets
      summary: "Target update"
      parameters:
        - name: target_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/TargetCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Target200'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    patch:
      tags:
        - targets
      summary: "Target partial update"
      parameters:
        - name: target_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/TargetCreateRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Target200'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
    delete:
      tags:
        - targets
      summary: "Transaction delete"
      parameters:
        - name: target_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: "No Content"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"


  '/targets/targets/{target_id}/transactions/':
    post:
      tags:
        - targets
      summary: "Add transaction to target"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
      responses:
        '200':
          $ref: '#/components/responses/Transactions200'
        '401':
          description: "Unauthorized"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Decimal:
      type: string
      example: "1000.00"

    CategoryCreate:
      type: object
      properties:
        name:
          type: string

    CategoryBase:
      allOf:
        - type: object
          properties:
            id:
              type: number
        - $ref: '#/components/schemas/CategoryCreate'

    TargetBase:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        create_date:
          type: string
          format: date
        expected_amount:
          type: string
        target_deadline:
          type: string
          format: date
        transaction_sum:
          type: string

    CategoryWithExpensesSums:
      allOf:
        - $ref: '#/components/schemas/CategoryBase'
        - type: object
          properties:
            transactions_sum:
              $ref: '#/components/schemas/Decimal'

    TransactionRetrieve:
      type: object
      properties:
        id:
          type: number
        category:
          $ref: '#/components/schemas/CategoryBase'
        transaction_type:
          type: string
          enum: [ "income", "expense" ]
        transaction_date:
          type: string
          format: date
        amount:
          $ref: '#/components/schemas/Decimal'

    BalanceRetrieve:
      type: object
      properties:
        id:
          type: number
        percent:
          type: number

    TargetRetrieve:
      allOf:
        - $ref: '#/components/schemas/BalanceRetrieve'
        - $ref: '#/components/schemas/TargetBase'

    TargetCreate:
      type: object
      properties:
        name:
          type: string
        target_deadline:
          type: string
          format: date
        category:
          type: number
        amount:
          type: number
          required: false
        expected_amount:
          type: number


  requestBodies:
    RegistrationRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      required: true

    TokenObtainRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      required: true

    TokenRefreshRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
      required: true

    TransactionCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              category:
                type: number
                description: category id
              transaction_type:
                type: string
                enum: ["income", "expense"]
              transaction_date:
                type: string
                format: date
              amount:
                type: number
      required: true

    CategoryCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryCreate'

    TargetCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TargetCreate'

  responses:
    Registration201:
      description: "Created"
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string

    Registration400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: array
                items:
                  type: string
                  example: "Пользователь с таким именем уже существует."
              emain:
                type: array
                items:
                  type: string
                  example: "Пользователь с таким Email уже существует."

    TokenObtain200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
                description: "refresh token"
              access:
                type: string
                description: "access token"

    TokenObtain401:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
              code:
                type: string
                example: "token_not_valid"
              messages:
                type: array
                items:
                  type: object
                  properties:
                    token_class:
                      type: string
                      example: "AccessToken"
                    token_type:
                      type: string
                      example: "access"
                    message:
                      type: string

    TokenRefresh400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Token is invalid or expired"
              code:
                type: string
                example: "token_not_valid"

    TokenRefresh401:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "The token is invalid or expired"
              code:
                type: string
                example: "token_not_valid"

    UsersMe200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string

    TransactionsList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
              next:
                type: string
                format: uri
                nullable: true
              previous:
                type: string
                format: uri
                nullable: true
              result:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionRetrieve'

    Transactions200:
      description: "Success"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRetrieve'

    TransactionCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение больше либо равно 0.01."
              non_field_errors:
                type: array
                items:
                  type: string
                  example: "Поле категория обязательно для транзакции типа расход"


    TransactionGlobal200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              total_income:
                $ref: '#/components/schemas/Decimal'
              total_expenses:
                $ref: '#/components/schemas/Decimal'

    TransactionBalance200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              balance:
                $ref: '#/components/schemas/Decimal'

    CategoriesList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CategoryBase'

    Categories200:
      description: "Success"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryBase'

    CategoryCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: array
                items:
                  type: string
                  example: "У пользоваетля уже существует категория с таким названием и типом"

    CategoriesWithExpensesList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CategoryWithExpensesSums'

    CategoriesTopList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                  example: "category name"
                transactions_sum:
                  $ref: '#/components/schemas/Decimal'

    TargetCreate201:
      description: "Created"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TargetBase'


    TargetsList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
              next:
                type: string
                format: uri
                nullable: true
              previous:
                type: string
                format: uri
                nullable: true
              result:
                type: array
                items:
                  $ref: '#/components/schemas/TargetRetrieve'

    Target200:
      description: "Success"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TargetBase'


  parameters:
    YearParam:
      in: query
      name: transactions_year
      required: false
      schema:
        type: string
        format: integer
        example: 2022

    MonthParam:
      in: query
      name: transactions_month
      required: false
      schema:
        type: string
        format: integer
        example: 12

    OrderPocketsParam:
      in: query
      name: order
      required: false
      schema:
        type: string
        example: 'amount'

    OrderTargetsParam:
      in: query
      name: order
      required: false
      schema:
        type: string
        enum: ['deadline', 'sum', 'created', 'percent']


